/* eslint-disable */
export const clientScript = Buffer.from("/* eslint-disable */\n(function () {\n  /**\n   * removes parameters from given URL.\n   * @param {string} inputPathWithParameters\n   */\n  function removeParameters(inputPathWithParameters) {\n    return inputPathWithParameters.replace(/^([^?#]*).*?$/, '$1');\n  }\n  /**\n   * returns true if the input is an absolute path.\n   * @param {string} inputPath\n   */\n  function isAbsolute(inputPath) {\n    return inputPath[0] === '/';\n  }\n  /**\n   * returns \"foo/bar\" if the input is \"foo/bar/baz\"\n   * @param {string} input\n   */\n  function dirname(input) {\n    return input.replace(/^(.*)\\/.*?$/, '$1');\n  }\n  /**\n   * returns \".html\" if the input is \"foo/bar/baz.html\"\n   * @param {string} input\n   */\n  function extname(input) {\n    return input.replace(/^.*\\./, '.');\n  }\n  /**\n   * convert relative pathname to absolute one\n   * @param {string} inputPathname\n   */\n  function absolutify(inputPathname) {\n    const pathname = removeParameters(inputPathname);\n    if (isAbsolute(pathname)) {\n      return pathname;\n    }\n    return dirname(location.pathname) + '/' + pathname;\n  }\n  /**\n   * handles \"change\" events\n   * @param {Object} event\n   * @param {string} event.data relative file path\n   */\n  function onChange(event) {\n    const pathname = event.data;\n    if (extname(pathname) === '.css') {\n      const selector = 'link[rel=\"stylesheet\"][href*=\"' + pathname + '\"]';\n      const element = document.querySelector(selector);\n      if (element) {\n        const absolutePath = absolutify(element.getAttribute('href'));\n        element.setAttribute('href', absolutePath + '?reload=' + Date.now());\n      }\n    } else {\n      location.reload();\n    }\n  }\n  /**\n   * handles \"error\" events\n   * @param {Object} event\n   */\n  function onError(event) {\n    console.error(event);\n  }\n  const scriptElement = document.querySelector('#middleware-static-livereload');\n  const src = scriptElement && scriptElement.getAttribute('src');\n  const endpoint = src && src + '/connect';\n  if (!endpoint) {\n    throw new Error('Failed to get the livereload endpoint');\n  }\n  const eventSource = new EventSource(endpoint);\n  eventSource.addEventListener('error', onError);\n  eventSource.addEventListener('add', onChange);\n  eventSource.addEventListener('change', onChange);\n  eventSource.addEventListener('unlink', onChange);\n})();\n");